<script>
  console.log('ONLOAD DEVICE');
  let timer = null;
  ipcRenderer.removeAllListeners('get_device_info');
  ipcRenderer.on('get_device_info', (event, arg) => {
    clearTimeout(timer);
    if (!remote.getGlobal('adbDevice')) {
      id('deviceBatteryCharge').innerHTML = 'unknown';
      return;
    }

    timer = setTimeout(() => ipcRenderer.send('get_device_info', ''), 30000);

    console.log('get_device_info ! ', arg);
    const { storage, user, fw, battery, wifi, ip } = arg;
    if (storage) {
      const percent = +storage.percent.replace('%', '');
      const success = Math.min(80, percent);
      const warning = Math.min(15, Math.max(0, percent - 80));
      const danger = Math.min(5, Math.max(0, percent - 95));

      id('storageDiv').innerHTML = `
      <small class="float-start">Used: ${storage.used} of ${storage.size}(${storage.percent})</small>
      <small class="float-end">Free: ${storage.free}</small><br/>
      <div class="progress">
        <div class="progress-bar progress-bar-striped bg-success" role="progressbar" style="width: ${success}%" aria-valuenow="${success}" aria-valuemin="0" aria-valuemax="100"></div>
        <div class="progress-bar progress-bar-striped bg-warning" role="progressbar" style="width: ${warning}%" aria-valuenow="${warning}" aria-valuemin="0" aria-valuemax="100"></div>
        <div class="progress-bar progress-bar-striped bg-danger" role="progressbar" style="width: ${danger}%" aria-valuenow="${danger}" aria-valuemin="0" aria-valuemax="100"></div>
      </div>`;
    } else {
      id('storageDiv').innerHTML = 'Can`t get storage status';
    }

    let bat_charge = 'none';
    let bat_note = '';
    let bat_level = 'XX';
    if (battery) {
      bat_level = battery.level;
      if (battery.temperature)
        bat_note = `Temperature: ${battery.temperature / 10}Â°C`;
      if (battery.ACpowered) bat_charge = 'AC';
      if (battery.USBpowered) bat_charge = 'USB';
      if (battery.Wirelesspowered) bat_charge = 'AIR';
      if (battery.Maxchargingcurrent && battery.Maxchargingvoltage) {
        const current = battery.Maxchargingcurrent / 1000000;
        const voltage = battery.Maxchargingvoltage / 1000000;
        bat_note += `\nMax Current: ${current}A\nMax Voltage: ${voltage}V\nMax Power: ${current * voltage}W`;
      }
    }

    id('deviceUserName').innerHTML = (user && user.name) || '<i>Unknown</i>';
    id('deviceFwVersion').innerText = (fw && fw.version) || 'v.XX';
    id('deviceBatteryLevel').innerText = bat_level;
    id('deviceBatteryLevel').parentNode.title = bat_note;
    id('deviceBatteryCharge').innerText = bat_charge;
    id('deviceWifi').innerText = wifi ? 'On' : 'Off';
    id('deviceIp').innerText =
      (wifi && ip) ||
      remote.getGlobal('currentConfiguration').lastIp ||
      'X.X.X.X';
  });
</script>

<div class="row" style="padding: 0px 30px">
  <div class="row col-8">
    <div class="col-3">
      <div>
        <i class="fa fa-user-circle-o"></i> User: <br>
        <small
          id="deviceUserName"
          >Unknown</small
        >
      </div>
    </div>
    <div class="col-3">
      <div>
        <i class="fa fa-tag"></i> FW: <br>
        <span id="deviceFwVersion">v.XX</span>
      </div>
    </div>
    <div class="col-3">
      <div>
        <i class="fa fa-battery-3"></i>
        <span id="deviceBatteryLevel">XX</span>% <br>
        <small> Charge: <span id="deviceBatteryCharge"></span> </small>
      </div>
    </div>
    <div class="col-3">
      <div>
        <i class="fa fa-wifi"></i>
        <span id="deviceWifi">Off</span>
        <br>
        <small>IP: <span id="deviceIp">X.X.X.X</span> </small>
      </div>
    </div>
  </div>
  <div class="col-4">
    <div id="storageDiv">
      <i class="fa fa-refresh fa-spin"></i> Trying to fetch device storage info
    </div>
  </div>
</div>
