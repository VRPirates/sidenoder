<!-- Modal -->
<div class="modal" id="appToolModal">
  <div
    class="modal-dialog"
    role="document"
    style="margin: 1.75rem auto; min-width:580px; max-width:40%"
  >
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="appToolModalLabel">App Tools</h5>
      </div>
      <div class="modal-body">
        <h4 class="text-center" id="packageName"></h4>
        <hr>
        <div class="card-body" id="configsCard" style="display: none">
          <div class="alert alert-warning">
            <small>
              <i class="fa fa-exclamation-triangle"></i>
              WARNING: All changes your own risk. Recommend to backup appdata
              before
            </small>
          </div>
          <div>
            <label class="mb-1" for="app_username">
              <h6 class="card-title mb-0">User/Multiplayer name</h6>
              <small class="card-text">
                Just rename, without account id reseting
              </small>
            </label>
            <input id="app_username" class="adbdev form-control" value="">
          </div>
          <hr>
        </div>
        <div class="card-body text-center">
          <a class="adbdev btn btn-info mb-1" id="startAppBtn"
            ><i class="fa fa-play"></i> Launch</a
          >
          <a class="adbdev btn btn-danger mb-1" id="uninstallAppBtn"
            ><i class="fa fa-trash-o"></i> Uninstall</a
          >
          <a class="adbdev btn btn-info mb-1" id="backupAppBtn"
            ><i class="fa fa-download"></i> Backup app + obbs</a
          >
          <a class="adbdev btn btn-info mb-1" id="backupDataBtn"
            ><i class="fa fa-download"></i> Backup appdata</a
          >
          <a class="adbdev btn btn-success mb-1 disabled" id="restoreDataBtn"
            ><i class="fa fa-upload"></i> Restore appdata</a
          >
          <a class="btn btn-primary mb-1 disabled" id="backupAppPath"
            ><i class="fa fa-folder-open"></i> Open backup folder</a
          >
        </div>
        <div style="min-height: 45px">
          <small id="tools_transfer_state"></small>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Close
        </button>
      </div>
    </div>
  </div>
</div>
<script>
  console.log('ONLOAD APPTOOL MODAL');

  ipcRenderer.removeAllListeners('process_data');
  ipcRenderer.on('process_data', (event, data) => {
    console.log('process_data received', data);
    if (!data) return (id('tools_transfer_state').innerHTML = '');

    let line = `${data.cmd}: ${formatBytes(data.bytes)}`;
    if (data.size) {
      line += ` of ${formatBytes(data.size)} (${data.percentage}%)`;
    }

    if (data.speedAvg) {
      line += ` - ${formatBytes(data.speedAvg)}/s (${formatEta(data.eta)})`;
    }

    const name = data.name.split('/').pop();
    id('tools_transfer_state').innerHTML = `${line}<br/> ${name}`;
  });

  ipcRenderer.removeAllListeners('app_backup');
  ipcRenderer.on('app_backup', (event, arg) => {
    $id('backupAppBtn').removeClass('disabled');
    if (arg.error) {
      id('tools_transfer_state').innerHTML =
        `<b class="text-danger">Backup Error: ${arg.error}</b>`;
    } else {
      id('tools_transfer_state').innerHTML =
        `<b class="text-success">Backup finished</b>`;
    }
  });
  ipcRenderer.removeAllListeners('data_backup');
  ipcRenderer.on('data_backup', (event, arg) => {
    $id('backupDataBtn').removeClass('disabled');
    $id('restoreDataBtn').removeClass('disabled');
    $id('backupAppPath').removeClass('disabled');

    if (arg.error) {
      id('tools_transfer_state').innerHTML =
        `<b class="text-danger">Backup Error: ${arg.error}</b>`;
    } else {
      id('tools_transfer_state').innerHTML =
        `<b class="text-success">Backup finished</b>`;
    }
  });
  ipcRenderer.removeAllListeners('data_restore');
  ipcRenderer.on('data_restore', (event, arg) => {
    $id('restoreDataBtn').removeClass('disabled');
    if (arg.error) {
      id('tools_transfer_state').innerHTML =
        `<b class="text-danger">Restore Error: ${arg.error}</b>`;
    } else {
      id('tools_transfer_state').innerHTML =
        `<b class="text-success">Restore finished</b>`;
    }
  });

  ipcRenderer.removeAllListeners('app_config_set');
  ipcRenderer.on('app_config_set', (event, { success, key, val }) => {
    $(`#app_${key}`)
      .val(val)
      .addClass(success ? 'is-valid' : 'is-invalid');
  });

  ipcRenderer.removeAllListeners('app_tools');
  ipcRenderer.on('app_tools', (event, arg) => {
    console.log('app_tools msg came: ', arg);
    $id('processingModal').modal('hide');

    const { pkg, backupPath, availableRestore, availableConfig } = arg;

    $id('packageName').text(pkg);

    $id('startAppBtn').click(({ target }) => {
      startApp(pkg);
      return true;
    });
    $id('uninstallAppBtn').click(({ target }) => {
      uninstall(target, pkg);
      return true;
    });
    $id('backupAppBtn').click(({ target }) => {
      target.classList.add('disabled');
      setAppBackupPath(pkg);
      return true;
    });
    $id('backupDataBtn').click(({ target }) => {
      target.classList.add('disabled');
      ipcRenderer.send('data_backup', pkg);
      return true;
    });
    $id('restoreDataBtn').click(({ target }) => {
      target.classList.add('disabled');
      ipcRenderer.send('data_restore', pkg);
      return true;
    });
    $id('backupAppPath').click((e) => {
      shell.openPath(
        path.join(remote.getGlobal('sidenoderHome'), 'backup_data', pkg),
      );
      return true;
    });

    if (availableRestore) {
      $id('backupAppPath').removeClass('disabled');
      $id('restoreDataBtn')
        .removeClass('disabled')
        .append(`(${new Date(+availableRestore).toLocaleString()})`);
    }

    if (availableConfig) {
      $id('configsCard').show();
      $id('app_username')
        .val(availableConfig.username)
        .change(({ target }) => {
          $(target).removeClass('is-valid');
          ipcRenderer.send('app_config_set', {
            pkg,
            key: 'username',
            val: target.value,
          });
          return true;
        });
    }

    $id('appToolModal').modal('show');
  });

  async function setAppBackupPath(pkg) {
    const file = await dialog.showOpenDialog(null, {
      title: 'Set backup path',
      message: 'Browse location for new backup',
      properties: ['openDirectory'],
    });
    if (file.canceled) return $id('backupAppBtn').removeClass('disabled');

    console.log('setAppBackupPath', pkg, file);
    const location = file.filePaths[0];

    ipcRenderer.send('app_backup', { location, pkg });
    return path;
  }
</script>
